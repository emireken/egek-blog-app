{"ast":null,"code":"import _slicedToArray from\"C:\\\\Coding\\\\react-blog-github\\\\react-blog-github\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React from'react';import{ApolloProvider}from'@apollo/react-hooks';import{Helmet}from\"react-helmet\";import{ThemeProvider}from\"styled-components\";import{config}from'./config';import{client}from'./Utils/apollo';import Router from'./Router';import GithubCallback from'./Containers/GithubCallback';import Toggle from\"./Components/Theme/Toggler\";import{GlobalStyles}from\"./Components/Theme/GlobalStyles\";import{lightTheme,darkTheme}from\"./Components/Theme/Theme\";import{useDarkMode}from\"./Components/Theme/useDarkMode\";var Application=function Application(){var urlParams=new URLSearchParams(window.location.search);var _useDarkMode=useDarkMode(),_useDarkMode2=_slicedToArray(_useDarkMode,2),theme=_useDarkMode2[0],themeToggler=_useDarkMode2[1];var themeMode=theme==='light'?lightTheme:darkTheme;if(urlParams.get('code')){return React.createElement(GithubCallback,null);}return React.createElement(React.Fragment,null,React.createElement(Helmet,null,React.createElement(\"title\",null,config.title),React.createElement(\"meta\",{charSet:\"utf-8\"}),React.createElement(\"meta\",{name:\"description\",content:config.subtitle}),React.createElement(\"meta\",{name:\"theme-color\",content:config.header.backgroundColor})),React.createElement(ApolloProvider,{client:client},React.createElement(ThemeProvider,{theme:themeMode,toggleTheme:themeToggler},React.createElement(GlobalStyles,null),React.createElement(Router,null),React.createElement(Toggle,{theme:theme,toggleTheme:themeToggler}))));};export default Application;","map":{"version":3,"sources":["C:/Coding/react-blog-github/react-blog-github/src/Application.js"],"names":["React","ApolloProvider","Helmet","ThemeProvider","config","client","Router","GithubCallback","Toggle","GlobalStyles","lightTheme","darkTheme","useDarkMode","Application","urlParams","URLSearchParams","window","location","search","theme","themeToggler","themeMode","get","title","subtitle","header","backgroundColor"],"mappings":"sIAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,cAAT,KAA+B,qBAA/B,CACA,OAASC,MAAT,KAAuB,cAAvB,CACA,OAASC,aAAT,KAA8B,mBAA9B,CAEA,OAASC,MAAT,KAAuB,UAAvB,CACA,OAASC,MAAT,KAAuB,gBAAvB,CACA,MAAOC,CAAAA,MAAP,KAAmB,UAAnB,CACA,MAAOC,CAAAA,cAAP,KAA2B,6BAA3B,CACA,MAAOC,CAAAA,MAAP,KAAmB,4BAAnB,CACA,OAASC,YAAT,KAA6B,iCAA7B,CACA,OAASC,UAAT,CAAqBC,SAArB,KAAsC,0BAAtC,CACA,OAAUC,WAAV,KAA6B,gCAA7B,CAEA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,EAAM,CACxB,GAAMC,CAAAA,SAAS,CAAG,GAAIC,CAAAA,eAAJ,CAAoBC,MAAM,CAACC,QAAP,CAAgBC,MAApC,CAAlB,CADwB,iBAEMN,WAAW,EAFjB,8CAEjBO,KAFiB,kBAEVC,YAFU,kBAGxB,GAAMC,CAAAA,SAAS,CAAGF,KAAK,GAAK,OAAV,CAAoBT,UAApB,CAAiCC,SAAnD,CAEA,GAAIG,SAAS,CAACQ,GAAV,CAAc,MAAd,CAAJ,CAA2B,CACzB,MAAO,qBAAC,cAAD,MAAP,CACD,CAED,MACE,yCACE,oBAAC,MAAD,MACI,iCAAQlB,MAAM,CAACmB,KAAf,CADJ,CAEI,4BAAM,OAAO,CAAC,OAAd,EAFJ,CAGI,4BAAM,IAAI,CAAC,aAAX,CAAyB,OAAO,CAAEnB,MAAM,CAACoB,QAAzC,EAHJ,CAII,4BAAM,IAAI,CAAC,aAAX,CAAyB,OAAO,CAAEpB,MAAM,CAACqB,MAAP,CAAcC,eAAhD,EAJJ,CADF,CAOE,oBAAC,cAAD,EAAgB,MAAM,CAAErB,MAAxB,EACE,oBAAC,aAAD,EAAe,KAAK,CAAEgB,SAAtB,CAAiC,WAAW,CAAED,YAA9C,EACE,oBAAC,YAAD,MADF,CAEE,oBAAC,MAAD,MAFF,CAGE,oBAAC,MAAD,EAAQ,KAAK,CAAED,KAAf,CAAsB,WAAW,CAAEC,YAAnC,EAHF,CADF,CAPF,CADF,CAiBD,CA1BD,CA4BA,cAAeP,CAAAA,WAAf","sourcesContent":["import React from 'react'\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { Helmet } from \"react-helmet\";\nimport { ThemeProvider } from \"styled-components\";\n\nimport { config } from './config'\nimport { client } from './Utils/apollo';\nimport Router from './Router';\nimport GithubCallback from './Containers/GithubCallback';\nimport Toggle from \"./Components/Theme/Toggler\";\nimport { GlobalStyles } from \"./Components/Theme/GlobalStyles\";\nimport { lightTheme, darkTheme } from \"./Components/Theme/Theme\";\nimport  { useDarkMode } from \"./Components/Theme/useDarkMode\";\n\nconst Application = () => {\n  const urlParams = new URLSearchParams(window.location.search);\n  const [theme, themeToggler] = useDarkMode();\n  const themeMode = theme === 'light' ? lightTheme : darkTheme;\n\n  if (urlParams.get('code')) {\n    return <GithubCallback />\n  }\n\n  return (\n    <>\n      <Helmet>\n          <title>{config.title}</title>\n          <meta charSet=\"utf-8\" />\n          <meta name=\"description\" content={config.subtitle} />\n          <meta name=\"theme-color\" content={config.header.backgroundColor} />\n      </Helmet>\n      <ApolloProvider client={client}>\n        <ThemeProvider theme={themeMode} toggleTheme={themeToggler}>\n          <GlobalStyles />\n          <Router />\n          <Toggle theme={theme} toggleTheme={themeToggler} />\n        </ThemeProvider>\n      </ApolloProvider>\n    </>\n  )\n};\n\nexport default Application;"]},"metadata":{},"sourceType":"module"}