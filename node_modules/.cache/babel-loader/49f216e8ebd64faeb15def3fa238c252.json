{"ast":null,"code":"/*!\n * reading-time\n * Copyright (c) Nicolas Gryman <ngryman@gmail.com>\n * MIT Licensed\n */\n'use strict';\n\nfunction ansiWordBound(c) {\n  return ' ' === c || '\\n' === c || '\\r' === c || '\\t' === c;\n}\n\nfunction readingTime(text, options) {\n  var words = 0,\n      start = 0,\n      end = text.length - 1,\n      wordBound,\n      i;\n  options = options || {}; // use default values if necessary\n\n  options.wordsPerMinute = options.wordsPerMinute || 200; // use provided function if available\n\n  wordBound = options.wordBound || ansiWordBound; // fetch bounds\n\n  while (wordBound(text[start])) {\n    start++;\n  }\n\n  while (wordBound(text[end])) {\n    end--;\n  } // calculate the number of words\n\n\n  for (i = start; i <= end;) {\n    for (; i <= end && !wordBound(text[i]); i++) {\n      ;\n    }\n\n    words++;\n\n    for (; i <= end && wordBound(text[i]); i++) {\n      ;\n    }\n  } // reading time stats\n\n\n  var minutes = words / options.wordsPerMinute;\n  var time = minutes * 60 * 1000;\n  var displayed = Math.ceil(minutes.toFixed(2));\n  return {\n    text: displayed + ' min read',\n    minutes: minutes,\n    time: time,\n    words: words\n  };\n}\n/**\n * Export\n */\n\n\nmodule.exports = readingTime;","map":{"version":3,"sources":["C:/Coding/react-blog-github/react-blog-github/node_modules/reading-time/lib/reading-time.js"],"names":["ansiWordBound","c","readingTime","text","options","words","start","end","length","wordBound","i","wordsPerMinute","minutes","time","displayed","Math","ceil","toFixed","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA;;AAEA,SAASA,aAAT,CAAuBC,CAAvB,EAA0B;AACxB,SACG,QAAQA,CAAT,IACC,SAASA,CADV,IAEC,SAASA,CAFV,IAGC,SAASA,CAJZ;AAMD;;AAED,SAASC,WAAT,CAAqBC,IAArB,EAA2BC,OAA3B,EAAoC;AAClC,MAAIC,KAAK,GAAG,CAAZ;AAAA,MAAeC,KAAK,GAAG,CAAvB;AAAA,MAA0BC,GAAG,GAAGJ,IAAI,CAACK,MAAL,GAAc,CAA9C;AAAA,MAAiDC,SAAjD;AAAA,MAA4DC,CAA5D;AAEAN,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB,CAHkC,CAKlC;;AACAA,EAAAA,OAAO,CAACO,cAAR,GAAyBP,OAAO,CAACO,cAAR,IAA0B,GAAnD,CANkC,CAQlC;;AACAF,EAAAA,SAAS,GAAGL,OAAO,CAACK,SAAR,IAAqBT,aAAjC,CATkC,CAWlC;;AACA,SAAOS,SAAS,CAACN,IAAI,CAACG,KAAD,CAAL,CAAhB;AAA+BA,IAAAA,KAAK;AAApC;;AACA,SAAOG,SAAS,CAACN,IAAI,CAACI,GAAD,CAAL,CAAhB;AAA6BA,IAAAA,GAAG;AAAhC,GAbkC,CAelC;;;AACA,OAAKG,CAAC,GAAGJ,KAAT,EAAgBI,CAAC,IAAIH,GAArB,GAA2B;AACzB,WAAOG,CAAC,IAAIH,GAAL,IAAY,CAACE,SAAS,CAACN,IAAI,CAACO,CAAD,CAAL,CAA7B,EAAwCA,CAAC,EAAzC;AAA6C;AAA7C;;AACAL,IAAAA,KAAK;;AACL,WAAOK,CAAC,IAAIH,GAAL,IAAYE,SAAS,CAACN,IAAI,CAACO,CAAD,CAAL,CAA5B,EAAuCA,CAAC,EAAxC;AAA4C;AAA5C;AACD,GApBiC,CAsBlC;;;AACA,MAAIE,OAAO,GAAGP,KAAK,GAAGD,OAAO,CAACO,cAA9B;AACA,MAAIE,IAAI,GAAGD,OAAO,GAAG,EAAV,GAAe,IAA1B;AACA,MAAIE,SAAS,GAAGC,IAAI,CAACC,IAAL,CAAUJ,OAAO,CAACK,OAAR,CAAgB,CAAhB,CAAV,CAAhB;AAEA,SAAO;AACLd,IAAAA,IAAI,EAAEW,SAAS,GAAG,WADb;AAELF,IAAAA,OAAO,EAAEA,OAFJ;AAGLC,IAAAA,IAAI,EAAEA,IAHD;AAILR,IAAAA,KAAK,EAAEA;AAJF,GAAP;AAMD;AAED;AACA;AACA;;;AACAa,MAAM,CAACC,OAAP,GAAiBjB,WAAjB","sourcesContent":["/*!\n * reading-time\n * Copyright (c) Nicolas Gryman <ngryman@gmail.com>\n * MIT Licensed\n */\n\n'use strict'\n\nfunction ansiWordBound(c) {\n  return (\n    (' ' === c) ||\n    ('\\n' === c) ||\n    ('\\r' === c) ||\n    ('\\t' === c)\n  )\n}\n\nfunction readingTime(text, options) {\n  var words = 0, start = 0, end = text.length - 1, wordBound, i\n\n  options = options || {}\n\n  // use default values if necessary\n  options.wordsPerMinute = options.wordsPerMinute || 200\n\n  // use provided function if available\n  wordBound = options.wordBound || ansiWordBound\n\n  // fetch bounds\n  while (wordBound(text[start])) start++\n  while (wordBound(text[end])) end--\n\n  // calculate the number of words\n  for (i = start; i <= end;) {\n    for (; i <= end && !wordBound(text[i]); i++) ;\n    words++\n    for (; i <= end && wordBound(text[i]); i++) ;\n  }\n\n  // reading time stats\n  var minutes = words / options.wordsPerMinute\n  var time = minutes * 60 * 1000\n  var displayed = Math.ceil(minutes.toFixed(2))\n\n  return {\n    text: displayed + ' min read',\n    minutes: minutes,\n    time: time,\n    words: words\n  }\n}\n\n/**\n * Export\n */\nmodule.exports = readingTime\n"]},"metadata":{},"sourceType":"script"}