{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Coding\\\\react-blog-github\\\\react-blog-github\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Coding\\\\react-blog-github\\\\react-blog-github\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:\\\\Coding\\\\react-blog-github\\\\react-blog-github\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import _taggedTemplateLiteral from\"C:\\\\Coding\\\\react-blog-github\\\\react-blog-github\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject,_templateObject2,_templateObject3;import React,{useState,useEffect,useCallback,useRef}from\"react\";import moment from\"moment\";import Markdown from\"markdown-to-jsx\";import readingTime from\"reading-time\";import{GithubSelector,GithubCounter}from\"react-reactions\";import{userClient}from'../Utils/apollo';import{gql}from\"apollo-boost\";import{useQuery}from\"@apollo/react-hooks\";import{config}from\"../config\";import{getEmojiByName,getNameByEmoji}from'../Utils/emoji';import{getAuthenticatedUser}from'../Utils/auth';import{Loader}from\"../Components/Common\";import{PostContainer,PostTitle,PostDate,PostDateLink,PostReaction,BackButton}from\"../Components/Post\";import{AuthorDetails,AuthorAvatar,AuthorName}from\"../Components/Post/Author\";import{GithubLogin}from'../Components/Header';import{HyperLink,CodeBlock}from'../Components/Markdown/Overrides';import CommentsSection from\"./CommentsSection\";export default function BlogHome(){var issueNumber=parseInt(window.location.href.split(\"/\").pop());var GET_POSTS=gql(_templateObject||(_templateObject=_taggedTemplateLiteral([\"{\\n    repository(owner: \\\"\",\"\\\", name: \\\"\",\"\\\") {\\n      issue(number: \",\") {\\n        title\\n        body\\n        bodyHTML\\n        url\\n        bodyText\\n        number\\n        bodyHTML\\n        author {\\n          url\\n          avatarUrl\\n          login\\n        }\\n        reactions(first:100){\\n          nodes{\\n            content\\n            user{\\n              id\\n              login\\n            }\\n          }\\n        }\\n        updatedAt\\n        id\\n        comments(first:100) {\\n          nodes {\\n            author {\\n              ... on User {\\n                avatarUrl\\n                name\\n                login\\n              }\\n            }\\n            body\\n            bodyHTML\\n            bodyText\\n            publishedAt\\n            updatedAt\\n          }\\n        }\\n      }\\n    }\\n  }\\n  \"])),config.githubUserName,config.githubRepo,issueNumber);var _useState=useState([]),_useState2=_slicedToArray(_useState,2),post=_useState2[0],setPost=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),postNodeId=_useState4[0],setPostNodeId=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),reactionPopup=_useState6[0],setReactionPopup=_useState6[1];var _useState7=useState([]),_useState8=_slicedToArray(_useState7,2),postReactions=_useState8[0],setPostReactions=_useState8[1];var _useState9=useState([]),_useState10=_slicedToArray(_useState9,2),postComments=_useState10[0],setPostComments=_useState10[1];var _useQuery=useQuery(GET_POSTS),loading=_useQuery.loading,error=_useQuery.error,data=_useQuery.data;var reactionsContainer=useRef(null);var userToken=localStorage.getItem('githubToken');var setReactionFun=useCallback(function(reactions){// {\n//   emoji: \"üëç\", // String emoji reaction\n//   by: \"case\" // String of persons name\n// }\nvar reactions_array=[];reactions.forEach(function(element){var obj={by:element.user.login,emoji:getEmojiByName(element.content)};reactions_array.push(obj);});setPostReactions(reactions_array);},[]);var toggleReaction=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(emoji){var reactions,user,existingReaction,reactionToAdd;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:reactions=postReactions;_context.next=3;return getAuthenticatedUser();case 3:user=_context.sent;existingReaction=reactions.filter(function(r){return r.emoji===emoji&&r.by===user.login;});if(!(existingReaction.length===0)){_context.next=12;break;}reactionToAdd={by:user.login,emoji:emoji};// Add the reaction\n_context.next=9;return userClient(userToken).mutate({mutation:gql(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n          mutation AddReaction {\\n            addReaction(input:{subjectId:\\\"\",\"\\\",content:\",\",clientMutationId:\\\"\",\"\\\"}) {\\n              reaction {\\n                id\\n              }\\n            }\\n          }\\n        \"])),postNodeId,getNameByEmoji(emoji),user.node_id)});case 9:reactions.push(reactionToAdd);_context.next=15;break;case 12:_context.next=14;return userClient(userToken).mutate({mutation:gql(_templateObject3||(_templateObject3=_taggedTemplateLiteral([\"\\n          mutation RemoveReaction {\\n            removeReaction(input:{subjectId:\\\"\",\"\\\",content:\",\",clientMutationId:\\\"\",\"\\\"}) {\\n              reaction {\\n                id\\n              }\\n            }\\n          }\\n        \"])),postNodeId,getNameByEmoji(emoji),user.node_id)});case 14:// Remove the reaction from the state\nreactions=reactions.filter(function(r){return!(r.by===user.login&&r.emoji===emoji);});case 15:setPostReactions(reactions);reactionsContainer.current.forceUpdate();// refresh the counter\nsetReactionPopup(false);// hiding the reactions choice\ncase 18:case\"end\":return _context.stop();}}},_callee);}));return function toggleReaction(_x){return _ref.apply(this,arguments);};}();useEffect(function(){if(!loading){if(data){var issues=data.repository.issue;setPostNodeId(issues.id);setPost(issues);setReactionFun(issues.reactions.nodes);setPostComments(issues.comments.nodes);}}},[loading,error,data,setReactionFun]);if(loading){return/*#__PURE__*/React.createElement(Loader,null);}var onBackClick=function onBackClick(){// ifthe previous page does not exist in the history list. this method to load the previous (or next) URL in the history list.\nwindow.history.go();// The back() method loads the previous URL in the history list.\nwindow.history.back();};return/*#__PURE__*/React.createElement(React.Fragment,null,post.title&&/*#__PURE__*/React.createElement(PostContainer,null,/*#__PURE__*/React.createElement(BackButton,{onClick:function onClick(){return onBackClick();}},\"Back\"),/*#__PURE__*/React.createElement(PostTitle,null,post.title),/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(AuthorDetails,null,/*#__PURE__*/React.createElement(AuthorAvatar,{src:post.author.avatarUrl,alt:post.author.login}),/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(AuthorName,null,post.author.login),/*#__PURE__*/React.createElement(PostDate,null,moment(post.updatedAt).format(\"DD MMM YYYY\"),\" .\",readingTime(post.body).minutes,\" Min Read .\",/*#__PURE__*/React.createElement(PostDateLink,{href:post.url,target:\"_black\"},\"View On Github\"))))),/*#__PURE__*/React.createElement(Markdown,{options:{overrides:{a:{component:HyperLink},pre:{component:CodeBlock}}}},post.body),reactionPopup&&/*#__PURE__*/React.createElement(PostReaction,null,userToken?/*#__PURE__*/React.createElement(GithubSelector,{onSelect:function onSelect(emoji){return toggleReaction(emoji);}}):/*#__PURE__*/React.createElement(GithubLogin,{isAbsolute:false})),/*#__PURE__*/React.createElement(GithubCounter,{ref:reactionsContainer,counters:postReactions,onSelect:function onSelect(emoji){return toggleReaction(emoji);},onAdd:function onAdd(){return setReactionPopup(!reactionPopup);}}),/*#__PURE__*/React.createElement(CommentsSection,{postUrl:post.url,comments:postComments})));}","map":{"version":3,"sources":["C:/Coding/react-blog-github/react-blog-github/src/Containers/BlogPost.js"],"names":["React","useState","useEffect","useCallback","useRef","moment","Markdown","readingTime","GithubSelector","GithubCounter","userClient","gql","useQuery","config","getEmojiByName","getNameByEmoji","getAuthenticatedUser","Loader","PostContainer","PostTitle","PostDate","PostDateLink","PostReaction","BackButton","AuthorDetails","AuthorAvatar","AuthorName","GithubLogin","HyperLink","CodeBlock","CommentsSection","BlogHome","issueNumber","parseInt","window","location","href","split","pop","GET_POSTS","githubUserName","githubRepo","post","setPost","postNodeId","setPostNodeId","reactionPopup","setReactionPopup","postReactions","setPostReactions","postComments","setPostComments","loading","error","data","reactionsContainer","userToken","localStorage","getItem","setReactionFun","reactions","reactions_array","forEach","element","obj","by","user","login","emoji","content","push","toggleReaction","existingReaction","filter","r","length","reactionToAdd","mutate","mutation","node_id","current","forceUpdate","issues","repository","issue","id","nodes","comments","onBackClick","history","go","back","title","author","avatarUrl","updatedAt","format","body","minutes","url","overrides","a","component","pre"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from \"react\";\nimport moment from \"moment\";\nimport Markdown from \"markdown-to-jsx\";\nimport readingTime from \"reading-time\";\nimport { GithubSelector, GithubCounter } from \"react-reactions\";\nimport { userClient } from '../Utils/apollo'\nimport { gql } from \"apollo-boost\";\nimport { useQuery } from \"@apollo/react-hooks\";\n\nimport { config } from \"../config\";\nimport { getEmojiByName, getNameByEmoji } from '../Utils/emoji';\nimport { getAuthenticatedUser } from '../Utils/auth'\nimport { Loader } from \"../Components/Common\";\nimport { PostContainer, PostTitle, PostDate, PostDateLink, PostReaction, BackButton } from \"../Components/Post\";\nimport { AuthorDetails, AuthorAvatar, AuthorName } from \"../Components/Post/Author\";\nimport { GithubLogin } from '../Components/Header'\nimport { HyperLink, CodeBlock } from '../Components/Markdown/Overrides';\nimport CommentsSection from \"./CommentsSection\";\n\nexport default function BlogHome() {\n  const issueNumber = parseInt(window.location.href.split(\"/\").pop());\n  const GET_POSTS = gql`{\n    repository(owner: \"${config.githubUserName}\", name: \"${config.githubRepo}\") {\n      issue(number: ${issueNumber}) {\n        title\n        body\n        bodyHTML\n        url\n        bodyText\n        number\n        bodyHTML\n        author {\n          url\n          avatarUrl\n          login\n        }\n        reactions(first:100){\n          nodes{\n            content\n            user{\n              id\n              login\n            }\n          }\n        }\n        updatedAt\n        id\n        comments(first:100) {\n          nodes {\n            author {\n              ... on User {\n                avatarUrl\n                name\n                login\n              }\n            }\n            body\n            bodyHTML\n            bodyText\n            publishedAt\n            updatedAt\n          }\n        }\n      }\n    }\n  }\n  `;\n  const [post, setPost] = useState([]);\n  const [postNodeId, setPostNodeId] = useState('');\n  const [reactionPopup, setReactionPopup] = useState(false);\n  const [postReactions, setPostReactions] = useState([]);\n  const [postComments, setPostComments] = useState([]);\n  const { loading, error, data } = useQuery(GET_POSTS);\n  const reactionsContainer = useRef(null);\n  const userToken = localStorage.getItem('githubToken');\n\n  const setReactionFun = useCallback((reactions) => {\n    // {\n    //   emoji: \"üëç\", // String emoji reaction\n    //   by: \"case\" // String of persons name\n    // }\n\n    let reactions_array = [];\n    reactions.forEach(element => {\n      let obj = {\n        by: element.user.login,\n        emoji: getEmojiByName(element.content)\n      };\n      reactions_array.push(obj);\n    });\n\n    setPostReactions(reactions_array);\n  }, []);\n\n  const toggleReaction = async (emoji) => {\n    let reactions = postReactions;\n    const user = await getAuthenticatedUser();\n    const existingReaction = reactions.filter(r => (r.emoji === emoji && r.by === user.login))\n\n    if (existingReaction.length === 0) {\n      const reactionToAdd = {\n        by: user.login,\n        emoji: emoji,\n      }\n\n      // Add the reaction\n      await userClient(userToken).mutate({\n        mutation: gql`\n          mutation AddReaction {\n            addReaction(input:{subjectId:\"${postNodeId}\",content:${getNameByEmoji(emoji)},clientMutationId:\"${user.node_id}\"}) {\n              reaction {\n                id\n              }\n            }\n          }\n        `\n      });\n\n      reactions.push(reactionToAdd);\n    } else {\n      // Remove the reaction\n      await userClient(userToken).mutate({\n        mutation: gql`\n          mutation RemoveReaction {\n            removeReaction(input:{subjectId:\"${postNodeId}\",content:${getNameByEmoji(emoji)},clientMutationId:\"${user.node_id}\"}) {\n              reaction {\n                id\n              }\n            }\n          }\n        `\n      });\n\n      // Remove the reaction from the state\n      reactions = reactions.filter(r => !(r.by === user.login && r.emoji === emoji))\n    }\n\n    setPostReactions(reactions);\n    reactionsContainer.current.forceUpdate(); // refresh the counter\n    setReactionPopup(false); // hiding the reactions choice\n  }\n\n  useEffect(() => {\n    if (!loading) {\n      if (data) {\n        const issues = data.repository.issue;\n        setPostNodeId(issues.id);\n        setPost(issues);\n        setReactionFun(issues.reactions.nodes);\n        setPostComments(issues.comments.nodes);\n      }\n    }\n  }, [loading, error, data, setReactionFun]);\n\n  if (loading) {\n    return <Loader />;\n  }\n\n  const onBackClick = () => {\n    // ifthe previous page does not exist in the history list. this method to load the previous (or next) URL in the history list.\n    window.history.go();\n    // The back() method loads the previous URL in the history list.\n    window.history.back();\n  };\n\n  return (\n    <>\n      {post.title && (\n        <PostContainer>\n          <BackButton onClick={() => onBackClick()}>Back</BackButton>\n\n          <PostTitle>{post.title}</PostTitle>\n          <div>\n            <AuthorDetails>\n              <AuthorAvatar src={post.author.avatarUrl} alt={post.author.login} />\n              <div>\n                <AuthorName>{post.author.login}</AuthorName>\n                <PostDate>\n                  {moment(post.updatedAt).format(\"DD MMM YYYY\")} .{readingTime(post.body).minutes} Min Read .\n                  <PostDateLink href={post.url} target=\"_black\">\n                    View On Github\n                  </PostDateLink>\n                </PostDate>\n              </div>\n            </AuthorDetails>\n          </div>\n          <Markdown\n            options={{\n              overrides: {\n                a: {\n                  component: HyperLink\n                },\n                pre: {\n                  component: CodeBlock\n                }\n              }\n            }}\n          >\n            {post.body}\n          </Markdown>\n          {reactionPopup && (\n            <PostReaction>\n              {userToken\n                ? <GithubSelector onSelect={emoji => toggleReaction(emoji)} />\n                : <GithubLogin isAbsolute={false} />\n              }\n            </PostReaction>\n          )}\n          <GithubCounter\n            ref={reactionsContainer}\n            counters={postReactions}\n            onSelect={emoji => toggleReaction(emoji)}\n            onAdd={() => setReactionPopup(!reactionPopup)}\n          />\n          <CommentsSection postUrl={post.url} comments={postComments} />\n        </PostContainer>\n      )}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}