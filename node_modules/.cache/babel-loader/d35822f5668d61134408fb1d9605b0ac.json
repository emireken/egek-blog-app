{"ast":null,"code":"var _jsxFileName = \"C:\\\\Coding\\\\react-blog-github\\\\react-blog-github\\\\src\\\\Containers\\\\BlogPost.js\";\nimport React, { useState, useEffect, useCallback, useRef } from \"react\";\nimport moment from \"moment\";\nimport Markdown from \"markdown-to-jsx\";\nimport readingTime from \"reading-time\";\nimport { GithubSelector, GithubCounter } from \"react-reactions\";\nimport { userClient } from '../Utils/apollo';\nimport { gql } from \"apollo-boost\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { config } from \"../config\";\nimport { getEmojiByName, getNameByEmoji } from '../Utils/emoji';\nimport { getAuthenticatedUser } from '../Utils/auth';\nimport { Loader } from \"../Components/Common\";\nimport { PostContainer, PostTitle, PostDate, PostDateLink, PostReaction, BackButton } from \"../Components/Post\";\nimport { AuthorDetails, AuthorAvatar, AuthorName } from \"../Components/Post/Author\";\nimport { GithubLogin } from '../Components/Header';\nimport { HyperLink, CodeBlock } from '../Components/Markdown/Overrides';\nimport CommentsSection from \"./CommentsSection\";\nexport default function BlogHome() {\n  const issueNumber = parseInt(window.location.href.split(\"/\").pop());\n  const GET_POSTS = gql`{\n    repository(owner: \"${config.githubUserName}\", name: \"${config.githubRepo}\") {\n      issue(number: ${issueNumber}) {\n        title\n        body\n        bodyHTML\n        url\n        bodyText\n        number\n        bodyHTML\n        author {\n          url\n          avatarUrl\n          login\n        }\n        reactions(first:100){\n          nodes{\n            content\n            user{\n              id\n              login\n            }\n          }\n        }\n        updatedAt\n        id\n        comments(first:100) {\n          nodes {\n            author {\n              ... on User {\n                avatarUrl\n                name\n                login\n              }\n            }\n            body\n            bodyHTML\n            bodyText\n            publishedAt\n            updatedAt\n          }\n        }\n      }\n    }\n  }\n  `;\n  const [post, setPost] = useState([]);\n  const [postNodeId, setPostNodeId] = useState('');\n  const [reactionPopup, setReactionPopup] = useState(false);\n  const [postReactions, setPostReactions] = useState([]);\n  const [postComments, setPostComments] = useState([]);\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_POSTS);\n  const reactionsContainer = useRef(null);\n  const userToken = localStorage.getItem('githubToken');\n  const setReactionFun = useCallback(reactions => {\n    // {\n    //   emoji: \"👍\", // String emoji reaction\n    //   by: \"case\" // String of persons name\n    // }\n    let reactions_array = [];\n    reactions.forEach(element => {\n      let obj = {\n        by: element.user.login,\n        emoji: getEmojiByName(element.content)\n      };\n      reactions_array.push(obj);\n    });\n    setPostReactions(reactions_array);\n  }, []);\n\n  const toggleReaction = async emoji => {\n    let reactions = postReactions;\n    const user = await getAuthenticatedUser();\n    const existingReaction = reactions.filter(r => r.emoji === emoji && r.by === user.login);\n\n    if (existingReaction.length === 0) {\n      const reactionToAdd = {\n        by: user.login,\n        emoji: emoji\n      }; // Add the reaction\n\n      await userClient(userToken).mutate({\n        mutation: gql`\n          mutation AddReaction {\n            addReaction(input:{subjectId:\"${postNodeId}\",content:${getNameByEmoji(emoji)},clientMutationId:\"${user.node_id}\"}) {\n              reaction {\n                id\n              }\n            }\n          }\n        `\n      });\n      reactions.push(reactionToAdd);\n    } else {\n      // Remove the reaction\n      await userClient(userToken).mutate({\n        mutation: gql`\n          mutation RemoveReaction {\n            removeReaction(input:{subjectId:\"${postNodeId}\",content:${getNameByEmoji(emoji)},clientMutationId:\"${user.node_id}\"}) {\n              reaction {\n                id\n              }\n            }\n          }\n        `\n      }); // Remove the reaction from the state\n\n      reactions = reactions.filter(r => !(r.by === user.login && r.emoji === emoji));\n    }\n\n    setPostReactions(reactions);\n    reactionsContainer.current.forceUpdate(); // refresh the counter\n\n    setReactionPopup(false); // hiding the reactions choice\n  };\n\n  useEffect(() => {\n    if (!loading) {\n      if (data) {\n        const issues = data.repository.issue;\n        setPostNodeId(issues.id);\n        setPost(issues);\n        setReactionFun(issues.reactions.nodes);\n        setPostComments(issues.comments.nodes);\n      }\n    }\n  }, [loading, error, data, setReactionFun]);\n\n  if (loading) {\n    return /*#__PURE__*/React.createElement(Loader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 12\n      }\n    });\n  }\n\n  const onBackClick = () => {\n    // ifthe previous page does not exist in the history list. this method to load the previous (or next) URL in the history list.\n    window.history.go(); // The back() method loads the previous URL in the history list.\n\n    window.history.back();\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, post.title && /*#__PURE__*/React.createElement(PostContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(BackButton, {\n    onClick: () => onBackClick(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 11\n    }\n  }, \"Back\"), /*#__PURE__*/React.createElement(PostTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 11\n    }\n  }, post.title), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(AuthorDetails, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(AuthorAvatar, {\n    src: post.author.avatarUrl,\n    alt: post.author.login,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(AuthorName, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 17\n    }\n  }, post.author.login), /*#__PURE__*/React.createElement(PostDate, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 17\n    }\n  }, moment(post.updatedAt).format(\"DD MMM YYYY\"), \" .\", readingTime(post.body).minutes, \" Min Read .\", /*#__PURE__*/React.createElement(PostDateLink, {\n    href: post.url,\n    target: \"_black\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 19\n    }\n  }, \"View On Github\"))))), /*#__PURE__*/React.createElement(Markdown, {\n    options: {\n      overrides: {\n        a: {\n          component: HyperLink\n        },\n        pre: {\n          component: CodeBlock\n        }\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 11\n    }\n  }, post.body), reactionPopup && /*#__PURE__*/React.createElement(PostReaction, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 13\n    }\n  }, userToken ? /*#__PURE__*/React.createElement(GithubSelector, {\n    onSelect: emoji => toggleReaction(emoji),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 19\n    }\n  }) : /*#__PURE__*/React.createElement(GithubLogin, {\n    isAbsolute: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(GithubCounter, {\n    ref: reactionsContainer,\n    counters: postReactions,\n    onSelect: emoji => toggleReaction(emoji),\n    onAdd: () => setReactionPopup(!reactionPopup),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(CommentsSection, {\n    postUrl: post.url,\n    comments: postComments,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 11\n    }\n  })));\n}","map":{"version":3,"sources":["C:/Coding/react-blog-github/react-blog-github/src/Containers/BlogPost.js"],"names":["React","useState","useEffect","useCallback","useRef","moment","Markdown","readingTime","GithubSelector","GithubCounter","userClient","gql","useQuery","config","getEmojiByName","getNameByEmoji","getAuthenticatedUser","Loader","PostContainer","PostTitle","PostDate","PostDateLink","PostReaction","BackButton","AuthorDetails","AuthorAvatar","AuthorName","GithubLogin","HyperLink","CodeBlock","CommentsSection","BlogHome","issueNumber","parseInt","window","location","href","split","pop","GET_POSTS","githubUserName","githubRepo","post","setPost","postNodeId","setPostNodeId","reactionPopup","setReactionPopup","postReactions","setPostReactions","postComments","setPostComments","loading","error","data","reactionsContainer","userToken","localStorage","getItem","setReactionFun","reactions","reactions_array","forEach","element","obj","by","user","login","emoji","content","push","toggleReaction","existingReaction","filter","r","length","reactionToAdd","mutate","mutation","node_id","current","forceUpdate","issues","repository","issue","id","nodes","comments","onBackClick","history","go","back","title","author","avatarUrl","updatedAt","format","body","minutes","url","overrides","a","component","pre"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from \"react\";\nimport moment from \"moment\";\nimport Markdown from \"markdown-to-jsx\";\nimport readingTime from \"reading-time\";\nimport { GithubSelector, GithubCounter } from \"react-reactions\";\nimport { userClient } from '../Utils/apollo'\nimport { gql } from \"apollo-boost\";\nimport { useQuery } from \"@apollo/react-hooks\";\n\nimport { config } from \"../config\";\nimport { getEmojiByName, getNameByEmoji } from '../Utils/emoji';\nimport { getAuthenticatedUser } from '../Utils/auth'\nimport { Loader } from \"../Components/Common\";\nimport { PostContainer, PostTitle, PostDate, PostDateLink, PostReaction, BackButton } from \"../Components/Post\";\nimport { AuthorDetails, AuthorAvatar, AuthorName } from \"../Components/Post/Author\";\nimport { GithubLogin } from '../Components/Header'\nimport { HyperLink, CodeBlock } from '../Components/Markdown/Overrides';\nimport CommentsSection from \"./CommentsSection\";\n\nexport default function BlogHome() {\n  const issueNumber = parseInt(window.location.href.split(\"/\").pop());\n  const GET_POSTS = gql`{\n    repository(owner: \"${config.githubUserName}\", name: \"${config.githubRepo}\") {\n      issue(number: ${issueNumber}) {\n        title\n        body\n        bodyHTML\n        url\n        bodyText\n        number\n        bodyHTML\n        author {\n          url\n          avatarUrl\n          login\n        }\n        reactions(first:100){\n          nodes{\n            content\n            user{\n              id\n              login\n            }\n          }\n        }\n        updatedAt\n        id\n        comments(first:100) {\n          nodes {\n            author {\n              ... on User {\n                avatarUrl\n                name\n                login\n              }\n            }\n            body\n            bodyHTML\n            bodyText\n            publishedAt\n            updatedAt\n          }\n        }\n      }\n    }\n  }\n  `;\n  const [post, setPost] = useState([]);\n  const [postNodeId, setPostNodeId] = useState('');\n  const [reactionPopup, setReactionPopup] = useState(false);\n  const [postReactions, setPostReactions] = useState([]);\n  const [postComments, setPostComments] = useState([]);\n  const { loading, error, data } = useQuery(GET_POSTS);\n  const reactionsContainer = useRef(null);\n  const userToken = localStorage.getItem('githubToken');\n\n  const setReactionFun = useCallback((reactions) => {\n    // {\n    //   emoji: \"👍\", // String emoji reaction\n    //   by: \"case\" // String of persons name\n    // }\n\n    let reactions_array = [];\n    reactions.forEach(element => {\n      let obj = {\n        by: element.user.login,\n        emoji: getEmojiByName(element.content)\n      };\n      reactions_array.push(obj);\n    });\n\n    setPostReactions(reactions_array);\n  }, []);\n\n  const toggleReaction = async (emoji) => {\n    let reactions = postReactions;\n    const user = await getAuthenticatedUser();\n    const existingReaction = reactions.filter(r => (r.emoji === emoji && r.by === user.login))\n\n    if (existingReaction.length === 0) {\n      const reactionToAdd = {\n        by: user.login,\n        emoji: emoji,\n      }\n\n      // Add the reaction\n      await userClient(userToken).mutate({\n        mutation: gql`\n          mutation AddReaction {\n            addReaction(input:{subjectId:\"${postNodeId}\",content:${getNameByEmoji(emoji)},clientMutationId:\"${user.node_id}\"}) {\n              reaction {\n                id\n              }\n            }\n          }\n        `\n      });\n\n      reactions.push(reactionToAdd);\n    } else {\n      // Remove the reaction\n      await userClient(userToken).mutate({\n        mutation: gql`\n          mutation RemoveReaction {\n            removeReaction(input:{subjectId:\"${postNodeId}\",content:${getNameByEmoji(emoji)},clientMutationId:\"${user.node_id}\"}) {\n              reaction {\n                id\n              }\n            }\n          }\n        `\n      });\n\n      // Remove the reaction from the state\n      reactions = reactions.filter(r => !(r.by === user.login && r.emoji === emoji))\n    }\n\n    setPostReactions(reactions);\n    reactionsContainer.current.forceUpdate(); // refresh the counter\n    setReactionPopup(false); // hiding the reactions choice\n  }\n\n  useEffect(() => {\n    if (!loading) {\n      if (data) {\n        const issues = data.repository.issue;\n        setPostNodeId(issues.id);\n        setPost(issues);\n        setReactionFun(issues.reactions.nodes);\n        setPostComments(issues.comments.nodes);\n      }\n    }\n  }, [loading, error, data, setReactionFun]);\n\n  if (loading) {\n    return <Loader />;\n  }\n\n  const onBackClick = () => {\n    // ifthe previous page does not exist in the history list. this method to load the previous (or next) URL in the history list.\n    window.history.go();\n    // The back() method loads the previous URL in the history list.\n    window.history.back();\n  };\n\n  return (\n    <>\n      {post.title && (\n        <PostContainer>\n          <BackButton onClick={() => onBackClick()}>Back</BackButton>\n\n          <PostTitle>{post.title}</PostTitle>\n          <div>\n            <AuthorDetails>\n              <AuthorAvatar src={post.author.avatarUrl} alt={post.author.login} />\n              <div>\n                <AuthorName>{post.author.login}</AuthorName>\n                <PostDate>\n                  {moment(post.updatedAt).format(\"DD MMM YYYY\")} .{readingTime(post.body).minutes} Min Read .\n                  <PostDateLink href={post.url} target=\"_black\">\n                    View On Github\n                  </PostDateLink>\n                </PostDate>\n              </div>\n            </AuthorDetails>\n          </div>\n          <Markdown\n            options={{\n              overrides: {\n                a: {\n                  component: HyperLink\n                },\n                pre: {\n                  component: CodeBlock\n                }\n              }\n            }}\n          >\n            {post.body}\n          </Markdown>\n          {reactionPopup && (\n            <PostReaction>\n              {userToken\n                ? <GithubSelector onSelect={emoji => toggleReaction(emoji)} />\n                : <GithubLogin isAbsolute={false} />\n              }\n            </PostReaction>\n          )}\n          <GithubCounter\n            ref={reactionsContainer}\n            counters={postReactions}\n            onSelect={emoji => toggleReaction(emoji)}\n            onAdd={() => setReactionPopup(!reactionPopup)}\n          />\n          <CommentsSection postUrl={post.url} comments={postComments} />\n        </PostContainer>\n      )}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}