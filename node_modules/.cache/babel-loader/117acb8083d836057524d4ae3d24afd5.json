{"ast":null,"code":"import _slicedToArray from\"C:\\\\Coding\\\\react-blog-github\\\\react-blog-github\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import{useEffect,useState}from'react';export var useDarkMode=function useDarkMode(){var _useState=useState('light'),_useState2=_slicedToArray(_useState,2),theme=_useState2[0],setTheme=_useState2[1];var setMode=function setMode(mode){window.localStorage.setItem('theme',mode);setTheme(mode);};var themeToggler=function themeToggler(){theme==='light'?setMode('dark'):setMode('light');};useEffect(function(){var localTheme=window.localStorage.getItem('theme');localTheme&&setTheme(localTheme);},[]);return[theme,themeToggler];};","map":{"version":3,"sources":["C:/Coding/react-blog-github/react-blog-github/src/Components/Theme/useDarkMode.js"],"names":["useEffect","useState","useDarkMode","theme","setTheme","setMode","mode","window","localStorage","setItem","themeToggler","localTheme","getItem"],"mappings":"4KAAA,OAASA,SAAT,CAAoBC,QAApB,KAAoC,OAApC,CACA,MAAO,IAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,EAAM,CAC7B,cAA0BD,QAAQ,CAAC,OAAD,CAAlC,wCAAOE,KAAP,eAAcC,QAAd,eAEA,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAAAC,IAAI,CAAI,CACpBC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,OAA5B,CAAqCH,IAArC,EACAF,QAAQ,CAACE,IAAD,CAAR,CACH,CAHD,CAKA,GAAMI,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,EAAM,CACvBP,KAAK,GAAK,OAAV,CAAoBE,OAAO,CAAC,MAAD,CAA3B,CAAsCA,OAAO,CAAC,OAAD,CAA7C,CACH,CAFD,CAIAL,SAAS,CAAC,UAAM,CACZ,GAAMW,CAAAA,UAAU,CAAGJ,MAAM,CAACC,YAAP,CAAoBI,OAApB,CAA4B,OAA5B,CAAnB,CACAD,UAAU,EAAIP,QAAQ,CAACO,UAAD,CAAtB,CACH,CAHQ,CAGN,EAHM,CAAT,CAIA,MAAO,CAACR,KAAD,CAAQO,YAAR,CAAP,CACH,CAjBM","sourcesContent":["import { useEffect, useState } from 'react';\nexport const useDarkMode = () => {\n    const [theme, setTheme] = useState('light');\n\n    const setMode = mode => {\n        window.localStorage.setItem('theme', mode)\n        setTheme(mode)\n    };\n\n    const themeToggler = () => {\n        theme === 'light' ? setMode('dark') : setMode('light')\n    };\n\n    useEffect(() => {\n        const localTheme = window.localStorage.getItem('theme');\n        localTheme && setTheme(localTheme)\n    }, []);\n    return [theme, themeToggler]\n};\n"]},"metadata":{},"sourceType":"module"}