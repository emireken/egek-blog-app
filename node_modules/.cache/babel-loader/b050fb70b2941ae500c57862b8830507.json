{"ast":null,"code":"var _jsxFileName = \"C:\\\\Coding\\\\react-blog-github\\\\react-blog-github\\\\src\\\\Containers\\\\GithubCallback.js\";\nimport React, { useEffect, useState } from 'react';\nimport { config } from '../config';\nimport { getAuthenticatedUser } from '../Utils/auth';\nimport { Loader } from '../Components/Common/Loader';\nconst {\n  enableOAuth,\n  OAuthClientID,\n  OAuthSecret\n} = config;\n\nconst GithubCallback = () => {\n  const [loading, setLoading] = useState(true);\n\n  const authenticate = async code => {\n    // Apparently we need to use a proxy to make this request (CORS blocked for client-side only applications)\n    const response = await fetch('https://cors-anywhere.herokuapp.com/https://github.com/login/oauth/access_token', {\n      method: 'POST',\n      body: new URLSearchParams({\n        client_id: OAuthClientID,\n        client_secret: OAuthSecret,\n        code: code\n      }),\n      headers: new Headers({\n        'Accept': 'application/json',\n        'Content-Type': 'application/x-www-form-urlencoded'\n      })\n    });\n    return response.json();\n  };\n\n  const setUsername = async () => {\n    const {\n      login\n    } = await getAuthenticatedUser();\n    localStorage.setItem('githubUsername', login);\n  };\n\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    authenticate(urlParams.get('code')).then(response => {\n      if (response) {\n        localStorage.setItem('githubToken', response.access_token);\n        setUsername().then(() => setLoading(false));\n      }\n    });\n  }, []);\n\n  if (!enableOAuth || !loading) {\n    return window.location.replace(window.location.origin + window.location.pathname);\n  }\n\n  return /*#__PURE__*/React.createElement(Loader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 10\n    }\n  });\n};\n\nexport default GithubCallback;","map":{"version":3,"sources":["C:/Coding/react-blog-github/react-blog-github/src/Containers/GithubCallback.js"],"names":["React","useEffect","useState","config","getAuthenticatedUser","Loader","enableOAuth","OAuthClientID","OAuthSecret","GithubCallback","loading","setLoading","authenticate","code","response","fetch","method","body","URLSearchParams","client_id","client_secret","headers","Headers","json","setUsername","login","localStorage","setItem","urlParams","window","location","search","get","then","access_token","replace","origin","pathname"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,SAASC,MAAT,QAAuB,WAAvB;AACA,SAASC,oBAAT,QAAqC,eAArC;AACA,SAASC,MAAT,QAAuB,6BAAvB;AAEA,MAAM;AAAEC,EAAAA,WAAF;AAAeC,EAAAA,aAAf;AAA8BC,EAAAA;AAA9B,IAA8CL,MAApD;;AAEA,MAAMM,cAAc,GAAG,MAAM;AAC3B,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,IAAD,CAAtC;;AAEA,QAAMU,YAAY,GAAG,MAAOC,IAAP,IAAgB;AACnC;AACA,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iFAAD,EAAoF;AAC9GC,MAAAA,MAAM,EAAE,MADsG;AAE9GC,MAAAA,IAAI,EAAE,IAAIC,eAAJ,CAAoB;AACxBC,QAAAA,SAAS,EAAEZ,aADa;AAExBa,QAAAA,aAAa,EAAEZ,WAFS;AAGxBK,QAAAA,IAAI,EAAEA;AAHkB,OAApB,CAFwG;AAO9GQ,MAAAA,OAAO,EAAE,IAAIC,OAAJ,CAAY;AACnB,kBAAU,kBADS;AAEnB,wBAAgB;AAFG,OAAZ;AAPqG,KAApF,CAA5B;AAaA,WAAOR,QAAQ,CAACS,IAAT,EAAP;AACD,GAhBD;;AAkBA,QAAMC,WAAW,GAAG,YAAY;AAC9B,UAAM;AAAEC,MAAAA;AAAF,QAAY,MAAMrB,oBAAoB,EAA5C;AACAsB,IAAAA,YAAY,CAACC,OAAb,CAAqB,gBAArB,EAAuCF,KAAvC;AACD,GAHD;;AAKAxB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM2B,SAAS,GAAG,IAAIV,eAAJ,CAAoBW,MAAM,CAACC,QAAP,CAAgBC,MAApC,CAAlB;AACAnB,IAAAA,YAAY,CAACgB,SAAS,CAACI,GAAV,CAAc,MAAd,CAAD,CAAZ,CACCC,IADD,CACOnB,QAAD,IAAc;AAClB,UAAIA,QAAJ,EAAc;AACZY,QAAAA,YAAY,CAACC,OAAb,CAAqB,aAArB,EAAoCb,QAAQ,CAACoB,YAA7C;AACAV,QAAAA,WAAW,GAAGS,IAAd,CAAmB,MAAMtB,UAAU,CAAC,KAAD,CAAnC;AACD;AACF,KAND;AAOD,GATQ,EASN,EATM,CAAT;;AAWA,MAAI,CAACL,WAAD,IAAgB,CAACI,OAArB,EAA8B;AAC5B,WAAOmB,MAAM,CAACC,QAAP,CAAgBK,OAAhB,CAAwBN,MAAM,CAACC,QAAP,CAAgBM,MAAhB,GAAyBP,MAAM,CAACC,QAAP,CAAgBO,QAAjE,CAAP;AACD;;AAED,sBAAO,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CA1CD;;AA4CA,eAAe5B,cAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\r\n\r\nimport { config } from '../config'\r\nimport { getAuthenticatedUser } from '../Utils/auth'\r\nimport { Loader } from '../Components/Common/Loader'\r\n\r\nconst { enableOAuth, OAuthClientID, OAuthSecret } = config\r\n\r\nconst GithubCallback = () => {\r\n  const [loading, setLoading] = useState(true)\r\n\r\n  const authenticate = async (code) => {\r\n    // Apparently we need to use a proxy to make this request (CORS blocked for client-side only applications)\r\n    const response = await fetch('https://cors-anywhere.herokuapp.com/https://github.com/login/oauth/access_token', {\r\n      method: 'POST',\r\n      body: new URLSearchParams({\r\n        client_id: OAuthClientID,\r\n        client_secret: OAuthSecret,\r\n        code: code,\r\n      }),\r\n      headers: new Headers({\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/x-www-form-urlencoded'\r\n      }),\r\n    })\r\n\r\n    return response.json()\r\n  }\r\n\r\n  const setUsername = async () => {\r\n    const { login } = await getAuthenticatedUser()\r\n    localStorage.setItem('githubUsername', login)\r\n  }\r\n\r\n  useEffect(() => {\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    authenticate(urlParams.get('code'))\r\n    .then((response) => {\r\n      if (response) {\r\n        localStorage.setItem('githubToken', response.access_token)\r\n        setUsername().then(() => setLoading(false))\r\n      }\r\n    })\r\n  }, [])\r\n\r\n  if (!enableOAuth || !loading) {\r\n    return window.location.replace(window.location.origin + window.location.pathname);\r\n  }\r\n\r\n  return <Loader />\r\n}\r\n\r\nexport default GithubCallback\r\n"]},"metadata":{},"sourceType":"module"}